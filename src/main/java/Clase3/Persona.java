package Clase3; // Defines the package where this class resides. Packages are used to organize Java classes and prevent naming conflicts.

import jakarta.persistence.*; // Imports necessary classes from the Jakarta Persistence API (JPA).
// JPA is a specification for persisting Java objects to a relational database.
// Hibernate is the default JPA implementation used by Spring Boot.
// Specifically, @Entity, @Id, @GeneratedValue, and GenerationType are imported.

/**
 * Persona.java (The Model)
 *
 * This class represents the "Model" component in the Model-View-Controller (MVC) design pattern.
 * In a Spring Boot application using JPA, an @Entity class serves as the fundamental building block
 * of your application's data. It maps directly to a table in your database.
 *
 * Each instance (object) of `Persona` will correspond to a row in the `persona` table (by default,
 * the table name matches the class name unless specified otherwise with `@Table`).
 *
 * Its primary responsibility is to define the structure of the data and hold the data itself.
 */
@Entity // This annotation marks this class as a JPA entity. It tells Hibernate (the default JPA provider
// in Spring Boot) that objects of this class can be persisted to a database. Hibernate will
// automatically create or update a table named 'persona' (by default) in your database based on this class definition.
public class Persona {

    // --- Attributes (Mapping to Database Columns) ---
    // These private fields represent the properties of a Persona and will become columns in the database table.

    @Id // This annotation designates the 'id' field as the primary key of the database table.
    // Every JPA entity must have a primary key to uniquely identify each record.
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    // This annotation specifies how the primary key values are generated.
    // 'strategy = GenerationType.IDENTITY' indicates that the database will automatically generate
    // the ID for new records (e.g., using an auto-increment column in MySQL/PostgreSQL).
    // This is a common and efficient strategy for simple primary keys.
    private int id; // The unique identifier for each person. This column will be auto-generated by the database.

    private String nombre;   // Represents the first name of the person. This will map to a 'nombre' column.
    private String apellido; // Represents the last name of the person. This will map to an 'apellido' column.
    private int edad;        // Represents the age of the person. This will map to an 'edad' column.

    // --- Constructors ---

    /**
     * Constructor vacio (Empty/Default Constructor)
     *
     * A no-argument constructor is **mandatory** for all JPA entities.
     * Hibernate (the JPA provider) uses this constructor internally to create new instances of the `Persona`
     * entity when loading data from the database. It then populates the fields using their setters or by direct field access.
     */
    public Persona(){
        // No specific initialization is needed here, as its purpose is for internal JPA instantiation.
    }

    /**
     * Constructor Compuesto (Parameterized Constructor)
     *
     * This constructor allows for creating `Persona` objects with all their attributes initialized
     * at the time of object creation. It's useful when you're manually constructing a new `Persona`
     * object in your code, for instance, before saving it to the database.
     *
     * @param id The unique identifier for the person.
     * @param nombre The first name of the person.
     * @param apellido The last name of the person.
     * @param edad The age of the person.
     */
    public Persona(int id, String nombre, String apellido, int edad) {
        this.id = id;         // 'this.id' refers to the instance variable, 'id' refers to the parameter passed to the constructor.
        this.nombre = nombre;
        this.apellido = apellido;
        this.edad = edad;
    }

    // --- MÃ©todos Get y Set (Getters and Setters) ---
    // These public methods provide controlled access to the private attributes of the class.
    // Getters retrieve the value of an attribute, and Setters modify it.
    // They enforce encapsulation (a core OOP principle), ensuring that the internal state of the object
    // can only be accessed or modified through defined interfaces.
    // Frameworks like Spring and JPA heavily rely on getters and setters to interact with your entity objects.

    public String getNombre() {
        return nombre; // Returns the current value of the 'nombre' attribute.
    }
    public void setNombre(String nombre) {
        this.nombre = nombre; // Sets the 'nombre' attribute to the value passed as an argument.
    }

    public String getApellido() {
        return apellido; // Returns the current value of the 'apellido' attribute.
    }
    public void setApellido(String apellido) {
        this.apellido = apellido; // Sets the 'apellido' attribute to the value passed as an argument.
    }

    public int getEdad() {
        return edad; // Returns the current value of the 'edad' attribute.
    }
    public void setEdad(int edad) {
        this.edad = edad; // Sets the 'edad' attribute to the value passed as an argument.
    }

    public int getId() {
        return id; // Returns the current value of the 'id' attribute.
    }

    public void setId(int id) {
        this.id = id; // Sets the 'id' attribute to the value passed as an argument.
    }

    // --- toString() Method ---
    @Override // This annotation indicates that this method is overriding a method from its superclass (Object).
    // All Java classes implicitly extend `Object`, which has a default `toString()` method.
    public String toString() {
        // This method provides a human-readable string representation of the `Persona` object.
        // It's incredibly useful for debugging, logging, and simply understanding the state of an object
        // when you print it (e.g., `System.out.println(personaObject);`).
        return "Persona{" + // Start of the string representation, typically with the class name.
                "id=" + id + // Appends the value of the 'id' attribute.
                ", nombre='" + nombre + '\'' + // Appends 'nombre' with single quotes around its value for clarity.
                ", apellido='" + apellido + '\'' + // Appends 'apellido' with single quotes.
                ", edad=" + edad + // Appends the value of 'edad'.
                '}'; // End of the string representation.
    }
}